# -*- coding: utf-8 -*-
"""Preprocessing_SADA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZDdBulBgq2_IM2lWmt5x6ic0lCDEheI1
"""

##HAYANI NAZURAH HASRAM 2117628
##NORA ALISSA BINTI ISMAIL 2117862

##This python script is to preprocess the data collected into a suitable form for data analysis for project SADA.
##It involves:
#Noise and Artifact Removal: Eliminating unwanted signals such as muscle activity, eye blinks, and environmental noise to enhance the quality of the EEG data.
#Bandpass Filtering: Applying filters to isolate specific frequency bands that are most relevant for attention-level classification.
#Feature Extraction: Identifying and extracting meaningful features from the EEG signal.

!pip install mne

# import to libraries
import numpy as np
import pandas as pd
import mne
import matplotlib.pyplot as plt
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

file_path = '/content/drive/MyDrive/SADA/eegdata_arithmetic.csv'
csv_data = pd.read_csv(file_path) # Load the data using the file_path variable

# Extract the sampling frequency
sfreq = 256  # Sampling frequency in Hz

channels = ['TP9', 'AF7', 'AF8', 'TP10']  # Muse 2 EEG channel names
eeg_data = csv_data[channels].values.T * 1e-6  # Convert µV to Volts (required by MNE)

# Create an MNE RawArray object
info = mne.create_info(ch_names=channels, sfreq=sfreq, ch_types=['eeg'] * len(channels))
time = csv_data['Timestamp'].values
raw = mne.io.RawArray(eeg_data, info)

print("time len", len(time))
print("raw shape", raw.get_data().shape)

# Plot raw signal in time domain
raw_data = raw.get_data()[0]

# Apply band-pass filter (1-50 Hz)
raw_filtered = raw.copy().filter(l_freq=1.0, h_freq=30.0)
filtered_data = raw_filtered.get_data()[0]

# Run ICA
ica = mne.preprocessing.ICA(n_components=len(channels), random_state=42, max_iter=200)
ica.fit(raw_filtered)
raw_cleaned = raw_filtered.copy()
ica.apply(raw_cleaned)
cleaned_data = raw_cleaned.get_data()[0]

print("raw shape", raw.get_data().shape)
print("raw_filtered shape", raw_filtered.get_data().shape)
print("raw_cleaned shape", raw_cleaned.get_data().shape)

# Plotting time and frequency domain subplots
plt.figure(figsize=(12, 6))
# Raw signal in time domain
plt.subplot(3, 2, 1)
plt.plot(time[:500], raw_data[:500], color='red')  # Show first 500 samples for better visibility
plt.title("Raw EEG Data")
plt.xlabel("Time (seconds)")
plt.ylabel("Amplitude (µV)")

# Raw signal in frequency domain
plt.subplot(3, 2, 2)
plt.magnitude_spectrum(raw_data, Fs=raw.info['sfreq'], color='red')
plt.title("Raw Signal (Frequency Domain)")

# Filtered signal in time domain
plt.subplot(3, 2, 3)
plt.plot(time[:500], filtered_data[:500], color='blue')  # Show first 500 samples for better visibility
plt.title("Filtered Signal (Time Domain)")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (µV)")

# Filtered signal in frequency domain
plt.subplot(3, 2, 4)
plt.magnitude_spectrum(filtered_data, Fs=raw.info['sfreq'], color='blue')
plt.title("Filtered Signal (Frequency Domain)")

# Cleaned signal after ICA in time domain
plt.subplot(3, 2, 5)
plt.plot(time[:500], cleaned_data[:500], color='green')  # Show first 500 samples for better visibility
plt.title("Signal After ICA (Time Domain)")
plt.xlabel("Time (s)")
plt.ylabel("Amplitude (µV)")

# Cleaned signal after ICA in frequency domain
plt.subplot(3, 2, 6)
plt.magnitude_spectrum(cleaned_data, Fs=raw.info['sfreq'], color='green')
plt.title("Signal After ICA (Frequency Domain)")

# print the graphs
plt.tight_layout()
plt.show()

import pandas as pd

# Create a DataFrame from the cleaned_data NumPy array
cleaned_data_df = pd.DataFrame(cleaned_data)

#save it to a CSV file
cleaned_data_df.to_csv('/content/drive/My Drive/SADA/cleaned_eeg_data.csv', index=False)

filtered_data = {}  # Store filtered data for each band
for band, freq_range in freq_bands.items():
       raw_band = raw_cleaned.copy().filter(l_freq=freq_range[0], h_freq=freq_range[1])  # Filter for the current band
       filtered_data[band] = raw_band.get_data()

import pandas as pd
import numpy as np
import mne


# Define frequency bands
freq_bands = {
    'delta': (1, 4),
    'theta': (4, 8),
    'alpha': (8, 12),
    'beta': (12, 30),
    'gamma': (30, 45)
}

# Extract features for each channel and band
features = {'Timestamp': csv_data['Timestamp'].values}  # Start with timestamps
for channel_index in range(len(channels)):
    for band, freq_range in freq_bands.items():
        # Filter the signal for the specific channel and band
        raw_band = raw_cleaned.copy().pick_channels([channels[channel_index]]).filter(l_freq=freq_range[0], h_freq=freq_range[1])

        # Extract the filtered data
        band_data = raw_band.get_data()[0]

        # Calculate the average power of the band
        band_power = np.mean(band_data**2)

        # Store the feature in the dictionary
        feature_name = f"{band}{channel_index}"  # Create feature name (e.g., 'alpha0', 'beta1')
        features[feature_name] = band_power


# Create a DataFrame from the extracted features
df = pd.DataFrame(features)

# Rename the column in the df DataFrame (if needed)
df = df.rename(columns={'Timestamp': 'timestamp'})

# Save the DataFrame to a CSV file
df.to_csv('/content/drive/My Drive/SADA/extracted_features.csv', index=False)
